# --------------------------------------------------------------------
# Copyright (c) 2022, WSO2 Inc. (http://wso2.com) All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -----------------------------------------------------------------------

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{printf "%s-%s" (include "choreo-connect.fullname" .) "gateway-runtime" | trunc 63 }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "choreo-connect.labels" . | nindent 4 }}
    app.kubernetes.io/component: choreo-connect-gateway-runtime
spec:
  {{- if not .Values.wso2.deployment.gatewayRuntime.autoscaling.enabled }}
  replicas: {{ .Values.wso2.deployment.gatewayRuntime.replicaCount }}
  {{- end }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "choreo-connect.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: choreo-connect-gateway-runtime
  template:
    metadata:
      {{- with .Values.wso2.deployment.gatewayRuntime.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "choreo-connect.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: choreo-connect-gateway-runtime
    spec:
      {{- if .Values.wso2.deployment.imagePullSecrets }}
      imagePullSecrets:
        {{- range .Values.wso2.deployment.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      {{- else if and (not (eq .Values.wso2.subscription.username "")) (not (eq .Values.wso2.subscription.password "")) }}
      imagePullSecrets:
        - name: {{ include "choreo-connect.subscriptionCredsSecretName" . }}
      {{- end }}
      serviceAccountName: {{ include "choreo-connect.serviceAccountName" . }}
      automountServiceAccountToken: false
      {{- with .Values.wso2.deployment.gatewayRuntime.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8}}
      {{- end }}
      containers:
        - name: choreo-connect-enforcer
          image: {{- include "image" (dict "Values" .Values "deployment" .Values.wso2.deployment.gatewayRuntime.enforcer) | indent 10 }}
          imagePullPolicy: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.imagePullPolicy }}
          volumeMounts:
          {{- if not .Values.wso2.deployment.gatewayRuntime.enforcer.security.truststore }}
            - mountPath: /home/wso2/security/truststore/wso2carbon.pem
              name: enforcer-truststore
              readOnly: true
              subPath: wso2carbon.pem
          {{- else -}}
            {{- include "choreo-connect.deployment.trustore.mounts" (dict "truststore" .Values.wso2.deployment.gatewayRuntime.enforcer.security.truststore "prefix" "enforcer") }}
          {{- end }}
            - mountPath: /home/wso2/security/truststore/mg.pem
              name: enforcer-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/truststore/adapter-ca-cert.pem
              name: adapter-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.adapter.security.keystore }}{{ .Values.wso2.deployment.adapter.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/truststore/router-ca-cert.pem
              name: router-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.router.security.keystore }}{{ .Values.wso2.deployment.gatewayRuntime.router.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/keystore/mg.key
              name: enforcer-keystore-key
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.key.subPath | quote }}{{ else }}"mg.key"{{ end }}
            - mountPath: /home/wso2/security/keystore/mg.pem
              name: enforcer-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/keystore/backend-jwt.key
              name: backend-jwt-keystore-key
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore.key.subPath | quote }}{{ else }}"mg.key"{{ end }}
            - mountPath: /home/wso2/security/keystore/backend-jwt.pem
              name: backend-jwt-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/conf/log4j2.properties
              name: enforcer-log4j2
              readOnly: true
              subPath: "log4j2.properties"
            - mountPath: /home/wso2/check_health.sh
              name: grpc-probe-health-check
              subPath: "check_health.sh"
            - mountPath: /home/wso2/lib/dropins
              name: enforcer-dropins
          {{- with .Values.wso2.deployment.gatewayRuntime.enforcer.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12}}
          {{- end }}
          env:
            - name: ENFORCER_PRIVATE_KEY_PATH
              value: "/home/wso2/security/keystore/mg.key"
            - name: ENFORCER_PUBLIC_CERT_PATH
              value: "/home/wso2/security/keystore/mg.pem"
            - name: TRUSTED_CA_CERTS_PATH
              value: "/home/wso2/security/truststore"
            - name: ADAPTER_HOST_NAME
              value: {{ .Values.wso2.deployment.adapter.security.sslHostname | quote }}
            - name: ADAPTER_HOST
              value: {{ include "choreo-connect.adapterFullname" . | quote }}
            - name: ADAPTER_XDS_PORT
              value: "18000"
            - name: ENFORCER_REGION
              value: "UNKNOWN"
            - name: XDS_MAX_MSG_SIZE
              value: "4194304"
            - name: XDS_MAX_RETRIES
              value: "3"
            - name: JAVA_OPTS
              value: "-Dhttpclient.hostnameVerifier=AllowAll -Xms512m -Xmx512m"
            - name: apim_admin_pwd
              value: "admin"
            - name: enforcer_admin_pwd
              value: "admin"
            - name: tm_admin_pwd
              value: "admin"
          {{- with .Values.wso2.deployment.gatewayRuntime.enforcer.envOverride }}
            {{- toYaml . | nindent 12}}
          {{- end }}
          {{- with .Values.wso2.deployment.labelName }}
            - name: ENFORCER_LABEL
              value: {{ . }}
            {{- end }}
          {{- with .Values.wso2.choreoAnalytics.endpoint }}
            - name: analytics_authURL
              value: {{ . }}
          {{- end }}
          {{- if .Values.wso2.choreoAnalytics.onpremKey }}
            - name: analytics_authToken
              valueFrom:
                secretKeyRef:
                  name: {{ printf "%s-analytics-auth-token" (include "choreo-connect.fullname" .) | trunc 63 }}
                  key: authToken
          {{- end }}
        {{- with .Values.wso2.deployment.gatewayRuntime.enforcer.resources }}
          resources:
            requests:
              memory: {{ .requests.memory }}
              cpu: {{ .requests.cpu }}
            limits:
              memory: {{ .limits.memory }}
              cpu: {{ .limits.cpu }}
        {{- end }}
          ports:
            - containerPort: 8081
            - containerPort: 9001
          startupProbe:
            exec:
              command: [ "sh", "check_health.sh" ]
            failureThreshold: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.startupProbe.periodSeconds }}
          livenessProbe:
            exec:
              command: [ "sh", "check_health.sh" ]
            initialDelaySeconds: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.livenessProbe.periodSeconds }}
          readinessProbe:
            exec:
              command: [ "sh", "check_health.sh" ]
            initialDelaySeconds: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.enforcer.livenessProbe.periodSeconds }}
        - name: choreo-connect-router
          image: {{- include "image" (dict "Values" .Values "deployment" .Values.wso2.deployment.gatewayRuntime.router) | indent 10 }}
          imagePullPolicy: {{ .Values.wso2.deployment.gatewayRuntime.router.imagePullPolicy }}
          volumeMounts:
            - mountPath:  /home/wso2/security/keystore/mg.key
              name: router-keystore-key
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.router.security.keystore }}{{ .Values.wso2.deployment.gatewayRuntime.router.security.keystore.key.subPath | quote }}{{ else }}"mg.key"{{ end }}
            - mountPath: /home/wso2/security/keystore/mg.pem
              name: router-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.router.security.keystore }}{{ .Values.wso2.deployment.gatewayRuntime.router.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/truststore/adapter-ca-cert.pem
              name: adapter-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.adapter.security.keystore -}}
                {{- .Values.wso2.deployment.adapter.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
            - mountPath: /home/wso2/security/truststore/enforcer-ca-cert.pem
              name: enforcer-keystore-cert
              readOnly: true
              subPath: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
                {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.cert.subPath | quote }}{{ else }}"mg.pem"{{ end }}
          {{- with .Values.wso2.deployment.gatewayRuntime.router.containerSecurityContext }}
          securityContext:
            {{- toYaml . | nindent 12}}
          {{- end }}
          env:
            - name: ROUTER_ADMIN_HOST
              value: "0.0.0.0"
            - name: ROUTER_ADMIN_PORT
              value: "9000"
            - name: ROUTER_CLUSTER
              value: "default_cluster"
            - name: ROUTER_PRIVATE_KEY_PATH
              value: "/home/wso2/security/keystore/mg.key"
            - name: ROUTER_PUBLIC_CERT_PATH
              value: "/home/wso2/security/keystore/mg.pem"
            - name: ADAPTER_HOST
              value: {{ include "choreo-connect.adapterFullname" . | quote }}
            - name: ADAPTER_PORT
              value: "18000"
            - name: ADAPTER_CA_CERT_PATH
              value: "/home/wso2/security/truststore/adapter-ca-cert.pem"
            - name: ENFORCER_CA_CERT_PATH
              value: "/home/wso2/security/truststore/enforcer-ca-cert.pem"
            - name: ENFORCER_HOST
              value: "127.0.0.1"
            - name: ENFORCER_PORT
              value: "8081"
            - name: ENFORCER_ANALYTICS_HOST
              value: "127.0.0.1"
            - name: ENFORCER_ANALYTICS_RECEIVER_PORT
              value: "18090"
            - name: CONCURRENCY
              value: "2"
          {{- with .Values.wso2.deployment.gatewayRuntime.enforcer.envOverride }}
            {{- toYaml . | nindent 12}}
          {{- end }}
          {{- with .Values.wso2.deployment.labelName }}
            - name: ROUTER_LABEL
              value: {{ . }}
          {{- end }}
        {{- with .Values.wso2.deployment.gatewayRuntime.router.resources }}
          resources:
            requests:
              memory: {{ .requests.memory }}
              cpu: {{ .requests.cpu }}
            limits:
              memory: {{ .limits.memory }}
              cpu: {{ .limits.cpu }}
        {{- end }}
          ports:
            - containerPort: 9000
            - containerPort: 9095
          startupProbe:
            httpGet:
              port: 9095
              path: /ready
              scheme: HTTPS
              httpHeaders:
                - name: Host
                  value: {{ .Values.wso2.deployment.gatewayRuntime.router.ingress.gateway.hostname }} # TODO: this should be localhost
            failureThreshold: {{ .Values.wso2.deployment.gatewayRuntime.router.startupProbe.failureThreshold }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.router.startupProbe.periodSeconds }}
          livenessProbe:
            httpGet:
              port: 9095
              path: /health
              scheme: HTTPS
              httpHeaders:
                - name: Host
                  value: {{ .Values.wso2.deployment.gatewayRuntime.router.ingress.gateway.hostname }}
            initialDelaySeconds: {{ .Values.wso2.deployment.gatewayRuntime.router.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.router.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              port: 9095
              path: /ready
              scheme: HTTPS
              httpHeaders:
                - name: Host
                  value: {{ .Values.wso2.deployment.gatewayRuntime.router.ingress.gateway.hostname }}
            initialDelaySeconds: {{ .Values.wso2.deployment.gatewayRuntime.router.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.wso2.deployment.gatewayRuntime.router.livenessProbe.periodSeconds }}
      volumes:
        - name: enforcer-log4j2
          configMap:
            name: {{ printf "%s-log4j2-properties" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}
        - name: enforcer-keystore-key
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
              {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.key.secretName -}}
              {{- else }}{{ printf "%s-default-keystore" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}{{ end }}
        - name: enforcer-keystore-cert
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore -}}
              {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.keystore.cert.secretName -}}
              {{- else }}{{ printf "%s-default-keystore" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}{{ end }}
        - name: backend-jwt-keystore-key
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore -}}
              {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore.key.secretName -}}
              {{- else }}{{ printf "%s-default-keystore" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}{{ end }}
        - name: backend-jwt-keystore-cert
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore -}}
            {{- .Values.wso2.deployment.gatewayRuntime.enforcer.security.backendJWT.keystore.cert.secretName -}}
            {{- else }}{{ printf "%s-default-keystore" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}{{ end }}
        {{- if not .Values.wso2.deployment.gatewayRuntime.enforcer.security.truststore }}
        - name: enforcer-truststore
          secret:
            secretName: {{ printf "%s-default-truststore" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}
        {{- else }}
          {{- include "choreo-connect.deployment.trustore.volumes" (dict "truststore" .Values.wso2.deployment.gatewayRuntime.enforcer.security.truststore "prefix" "enforcer") }}
        {{- end }}
        - name: grpc-probe-health-check
          configMap:
            name: {{ printf "%s-grpc-probe-script" (include "choreo-connect.enforcerFullname" .) | trunc 63 }}
            defaultMode: 0777
        - name: enforcer-dropins
          emptyDir: {} # TODO: configure conrigmap
        - name: router-keystore-key
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.router.security.keystore }}{{ .Values.wso2.deployment.gatewayRuntime.router.security.keystore.key.secretName }}{{ else }}{{ printf "%s-default-keystore" (include "choreo-connect.routerFullname" .) | trunc 63 }}{{ end }}
        - name: router-keystore-cert
          secret:
            secretName: {{ if .Values.wso2.deployment.gatewayRuntime.router.security.keystore }}{{ .Values.wso2.deployment.gatewayRuntime.router.security.keystore.cert.secretName }}{{ else }}{{ printf "%s-default-keystore" (include "choreo-connect.routerFullname" .) | trunc 63 }}{{ end }}
        - name: adapter-keystore-cert
          secret:
            secretName: {{ if .Values.wso2.deployment.adapter.security.keystore }}{{ .Values.wso2.deployment.adapter.security.keystore.cert.secretName }}{{ else }}{{printf "%s-default-keystore" (include "choreo-connect.adapterFullname" .) | trunc 63}}{{ end }}
      restartPolicy: Always
      {{- with .Values.wso2.deployment.gatewayRuntime.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.wso2.deployment.gatewayRuntime.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.wso2.deployment.gatewayRuntime.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
